(window.webpackJsonp = window.webpackJsonp || []).push([[1], { 87(e, n, t) {
  t.r(n), t.d(n, "getCLS", () => y), t.d(n, "getFCP", () => g), t.d(n, "getFID", () => C), t.d(n, "getLCP", () => k), t.d(n, "getTTFB", () => D); let i; let r; let a; let o; const u = function (e, n) { return { name: e, value: void 0 === n ? -1 : n, delta: 0, entries: [], id: "v2-".concat(Date.now(), "-").concat(Math.floor(8999999999999 * Math.random()) + 1e12) }; }; const c = function (e, n) { try { if (PerformanceObserver.supportedEntryTypes.includes(e)) { if (e === "first-input" && !("PerformanceEventTiming" in self)) return; const t = new PerformanceObserver((e) => e.getEntries().map(n)); return t.observe({ type: e, buffered: !0 }), t; } } catch (e) {} }; const f = function (e, n) { const t = function t(i) { i.type !== "pagehide" && document.visibilityState !== "hidden" || (e(i), n && (removeEventListener("visibilitychange", t, !0), removeEventListener("pagehide", t, !0))); }; addEventListener("visibilitychange", t, !0), addEventListener("pagehide", t, !0); }; const s = function (e) { addEventListener("pageshow", (n) => { n.persisted && e(n); }, !0); }; const m = function (e, n, t) { let i; return function (r) { n.value >= 0 && (r || t) && (n.delta = n.value - (i || 0), (n.delta || void 0 === i) && (i = n.value, e(n))); }; }; let d = -1; const v = function () { return document.visibilityState === "hidden" ? 0 : 1 / 0; }; const p = function () { f((e) => { const n = e.timeStamp; d = n; }, !0); }; const l = function () { return d < 0 && (d = v(), p(), s(() => { setTimeout(() => { d = v(), p(); }, 0); })), { get firstHiddenTime() { return d; } }; }; var g = function (e, n) { let t; const i = l(); let r = u("FCP"); const a = function (e) { e.name === "first-contentful-paint" && (f && f.disconnect(), e.startTime < i.firstHiddenTime && (r.value = e.startTime, r.entries.push(e), t(!0))); }; const o = window.performance && performance.getEntriesByName && performance.getEntriesByName("first-contentful-paint")[0]; var f = o ? null : c("paint", a); (o || f) && (t = m(e, r, n), o && a(o), s((i) => { r = u("FCP"), t = m(e, r, n), requestAnimationFrame(() => { requestAnimationFrame(() => { r.value = performance.now() - i.timeStamp, t(!0); }); }); })); }; let T = !1; let h = -1; var y = function (e, n) { T || (g((e) => { h = e.value; }), T = !0); let t; const i = function (n) { h > -1 && e(n); }; let r = u("CLS", 0); let a = 0; let o = []; const d = function (e) { if (!e.hadRecentInput) { const n = o[0]; const i = o[o.length - 1]; a && e.startTime - i.startTime < 1e3 && e.startTime - n.startTime < 5e3 ? (a += e.value, o.push(e)) : (a = e.value, o = [e]), a > r.value && (r.value = a, r.entries = o, t()); } }; const v = c("layout-shift", d); v && (t = m(i, r, n), f(() => { v.takeRecords().map(d), t(!0); }), s(() => { a = 0, h = -1, r = u("CLS", 0), t = m(i, r, n); })); }; const w = { passive: !0, capture: !0 }; const E = new Date(); const L = function (e, n) { i || (i = n, r = e, a = new Date(), F(removeEventListener), S()); }; var S = function () { if (r >= 0 && r < a - E) { const e = { entryType: "first-input", name: i.type, target: i.target, cancelable: i.cancelable, startTime: i.timeStamp, processingStart: i.timeStamp + r }; o.forEach((n) => { n(e); }), o = []; } }; const b = function (e) { if (e.cancelable) { const n = (e.timeStamp > 1e12 ? new Date() : performance.now()) - e.timeStamp; e.type == "pointerdown" ? (function (e, n) { const t = function () { L(e, n), r(); }; const i = function () { r(); }; var r = function () { removeEventListener("pointerup", t, w), removeEventListener("pointercancel", i, w); }; addEventListener("pointerup", t, w), addEventListener("pointercancel", i, w); }(n, e)) : L(n, e); } }; var F = function (e) { ["mousedown", "keydown", "touchstart", "pointerdown"].forEach((n) => e(n, b, w)); }; var C = function (e, n) { let t; const a = l(); let d = u("FID"); const v = function (e) { e.startTime < a.firstHiddenTime && (d.value = e.processingStart - e.startTime, d.entries.push(e), t(!0)); }; const p = c("first-input", v); t = m(e, d, n), p && f(() => { p.takeRecords().map(v), p.disconnect(); }, !0), p && s(() => { let a; d = u("FID"), t = m(e, d, n), o = [], r = -1, i = null, F(addEventListener), a = v, o.push(a), S(); }); }; const P = {}; var k = function (e, n) { let t; const i = l(); let r = u("LCP"); const a = function (e) { const n = e.startTime; n < i.firstHiddenTime && (r.value = n, r.entries.push(e), t()); }; const o = c("largest-contentful-paint", a); if (o) { t = m(e, r, n); const d = function () { P[r.id] || (o.takeRecords().map(a), o.disconnect(), P[r.id] = !0, t(!0)); }; ["keydown", "click"].forEach((e) => { addEventListener(e, d, { once: !0, capture: !0 }); }), f(d, !0), s((i) => { r = u("LCP"), t = m(e, r, n), requestAnimationFrame(() => { requestAnimationFrame(() => { r.value = performance.now() - i.timeStamp, P[r.id] = !0, t(!0); }); }); }); } }; var D = function (e) { let n; const t = u("TTFB"); n = function () { try { const n = performance.getEntriesByType("navigation")[0] || (function () { const e = performance.timing; const n = { entryType: "navigation", startTime: 0 }; for (const t in e)t !== "navigationStart" && t !== "toJSON" && (n[t] = Math.max(e[t] - e.navigationStart, 0)); return n; }()); if (t.value = t.delta = n.responseStart, t.value < 0 || t.value > performance.now()) return; t.entries = [n], e(t); } catch (e) {} }, document.readyState === "complete" ? setTimeout(n, 0) : addEventListener("load", () => setTimeout(n, 0)); };
} }]);
// # sourceMappingURL=1.7ef87339.chunk.js.map
